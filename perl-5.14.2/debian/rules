#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

export SHELL = /bin/bash

fullversion := $(shell /bin/bash debian/config.debian --full-version)
nextversion := $(shell /bin/bash debian/config.debian --next-version)
version     := $(shell /bin/bash debian/config.debian --version)
installtype := $(shell /bin/bash debian/config.debian --install-type)
test_target := $(shell /bin/bash debian/config.debian --test-target)
strip	    := $(shell /bin/bash debian/config.debian --strip)
archname    := $(shell /bin/bash debian/config.debian --archname)
srcdir      := $(shell pwd)
packages    := $(shell sed -n 's/^Package: *\(.*\)/\1/p' debian/control)
tmp	    = debian/tmp
bin         = $(tmp)/opt/perl$(fullversion)/bin
man         = $(tmp)/opt/perl$(fullversion)/man
lib         = $(tmp)/opt/perl$(fullversion)/lib/$(fullversion)/$(archname)
share       = $(tmp)/opt/perl$(fullversion)/lib/$(fullversion)
build	    = debian/build
debug       = $(build)/perl-debug/usr/lib/debug
patches     = debian/patches/series

checkdir    = test -d debian
checkroot   = test `id -u` -eq 0
checkperl   = $(SHELL) debian/checkperl

# this may differ from $(fullversion) for release candidates and the like
package_upstream_version = $(shell dpkg-parsechangelog | \
        sed -ne 's/-[^-]\+$$//; s/^Version: *\([0-9]\+:\)*//p')

package_version = $(shell dpkg-parsechangelog | sed -n 's/^Version: *//p')

# this gets prepended to the patch names in patchlevel.h
patchprefix = DEBPKG:
# the name of the file in debian/patches that modifies patchlevel.h
patchlevelpatch = patchlevel

# control file substitutions
subst_upstream = -VUpstream-Version=$(package_upstream_version)
subst_perlapi  = -Vperlapi:Provides="`./perl debian/mkprovides`"
subst_next_upstream = -VNext-Upstream-Version=$(nextversion)

# for ext/Compress-Raw-Bzip2
export BUILD_BZIP2=0
export BZIP2_INCLUDE=/usr/include
export BZIP2_LIB=/usr/lib

build: build-stamp
install: install-stamp

build-stamp: perl
	touch $@

perl:
	$(checkdir)
	rm -f libperl.so* # must be built last
	[ ! -f Makefile ] || $(MAKE) distclean
	$(SHELL) debian/config.debian --shared
	$(MAKE) perl $(test_target)
	mv libperl.a libperl-static

install-stamp: build-stamp
	$(checkdir)
	$(checkroot)
	$(checkperl)
	rm -rf $(tmp) $(build)

	$(MAKE) install
	# remove temporary prefix on install vars
	SRCDIR="$(srcdir)" ./perl -i -pe 's!\Q$$ENV{SRCDIR}\E/$(tmp)/!/! if /install/;' \
		$(lib)/Config.pm $(lib)/Config_heavy.pl

	# convert required header files
	-cd /usr/include; $(srcdir)/perl -I $(srcdir)/lib \
	    $(srcdir)/utils/h2ph -a -d $(srcdir)/$(lib) \
		`cat $(srcdir)/debian/headers`

	# fix up generated headers
	# XXX - is this needed with 5.14.2 ?
	# ./perl -Ilib debian/fixheaders $(lib)

	# simple wrapper around Errno module
	cp debian/errno.ph $(lib)

ifeq (,$(findstring nocheck,$(DEB_BUILD_OPTIONS)))
ifeq (,$(findstring x-perl-notest,$(DEB_BUILD_OPTIONS)))
	# Verify that the headers are usable
	for ph in `< $(srcdir)/debian/headers sed -e 's/\.h$$/.ph/'`; do \
		if [ ! -f $(srcdir)/$(lib)/$$ph ]; then \
			echo "$$ph: missing"; else \
		$(srcdir)/perl -I $(srcdir)/$(lib) -I $(srcdir)/$(share) -e \
			"print '"$$ph": '; require '"$$ph"'; print \"ok\n\";" \
				|| exit 1; \
		fi; \
	done
endif
endif

	# remove some cruft
	rm -f $(lib)/.packlist

	# installperl copies the symlinks as a files
	rm -f $(lib)/CORE/libperl.so $(lib)/CORE/libperl.so.$(version)

	# remove versioned binary, relink after moving files
	rm -f $(bin)/perl$(fullversion)

	ln -s libperl.so.$(fullversion) $(tmp)/$(lib)/libperl.so.$(version)
	ln -s libperl.so.$(version) $(tmp)/$(lib)/libperl.so

	# install debug binary as debugperl
	# cp perl.debug $(bin)/debugperl

	# split packages
	for p in $(packages); \
	do \
	    mkdir -p $(build)/$$p; \
	    (cd $(tmp); \
	    	for sfx in '' .$(installtype); \
		do \
		    list=../$$p.files$$sfx; \
		    test -s $$list || continue; \
		    find `cat $$list` ! -type d; \
		done) >debian/list.tmp; \
	    (cd $(tmp); cpio -vdumpl ../build/$$p) <debian/list.tmp 2>&1 | \
		grep -v ' linked to '; \
	    (cd $(tmp); ../../perl -nle unlink) <debian/list.tmp; \
	done

	# ensure that all file have been moved from debian/tmp
	test `find $(tmp) ! -type d | wc -l` -eq 0

	# install docs
	for p in $(packages); \
	do \
	    doc=$(build)/$$p/usr/share/doc; \
	    test -d $$doc || mkdir -p $$doc; \
	    if test -f debian/$$p.docs; \
	    then \
		while read src target; \
		do \
		    d=`expr $$target : '\([^/][^/]*\)'`; \
		    test -d $$doc/$$d || mkdir $$doc/$$d; \
		    cp -p $$src $$doc/$$target; \
		done <debian/$$p.docs; \
	    fi; \
	    test -d $$doc/$$p || ln -s perl $$doc/$$p; \
	done

	# lintian overrides
	for p in $(packages); \
	do \
	    if test -f debian/$$p.lintian-overrides; \
	    then \
	    d="$(build)/$$p/usr/share/lintian/overrides"; \
	    mkdir -p $$d; \
	    cp debian/$$p.lintian-overrides $$d/$$p; \
	    fi; \
	done

	# compress
	# XXX - needs fixing
	find $(build)/*/usr/share/man -type f -print | xargs -r gzip -9
	find $(build)/*/usr/share/doc -type f \
	    \( -name changelog\* -o \( -size +4k ! -name copyright \) \) \
	    -print | xargs -r gzip -9

ifeq ($(strip),yes)
	# strip
	find $(build)/*/usr/bin $(build)/*/usr/lib -type f \
	    \( -name \*.so\* -o -name \*.a -o -perm +111 \) -print | \
	    grep -v ^$(build)/perl-debug/ | \
	    while read f; \
	    do \
		type=`file $$f`; \
		extra=; \
		case "$$type" in \
		    *ELF*shared\ object*) \
		    	extra=--strip-unneeded;; \
		esac; \
		case "$$type" in \
		    *ELF*) \
			path=/$${f#$(build)/*/}; \
			dir=$${path%/*}; \
			test -d $(debug)$$dir || mkdir -p $(debug)$$dir; \
			# stash debugging symbols \
			objcopy --only-keep-debug $$f $(debug)$$path; \
			# strip \
			strip --remove-section=.comment --remove-section=.note \
			    $$extra $$f; \
			# add debuglink \
			objcopy --add-gnu-debuglink=$(debug)$$path $$f; \
		esac; \
	    done
	    # versioned hardlink for the detached debug symbols
	    ln $(debug)/usr/bin/perl \
	        $(debug)/usr/bin/perl$(fullversion)
endif


	# fixperms
	find $(build) -print | xargs -r chown -h root:root
	find $(build) -type d -print | xargs -r chmod 755
	find $(build) -type f -print | xargs -r chmod go=rX,u+rw,a-s
	find $(build)/*/usr/bin -type f -print | xargs -r chmod a+x
	find $(build)/*/usr/lib -type f -name \*.so\* -print | xargs -r chmod a-x
	find $(build)/*/usr/share/doc $(build)/*/usr/share/man -type f \
	    -print | xargs -r chmod 644

	# links
	ln -s perl.1.gz $(build)/perl-debug/usr/share/man/man1/debugperl.1.gz
	ln -s perl.1.gz $(build)/perl-base/usr/share/man/man1/perl$(fullversion).1.gz
	ln -s c2ph.1.gz $(build)/perl/usr/share/man/man1/pstruct.1.gz
	ln -s s2p.1.gz $(build)/perl/usr/share/man/man1/psed.1.gz
	ln -s perlbug.1.gz $(build)/perl/usr/share/man/man1/perlthanks.1.gz

	ln -s changelog.gz $(build)/perl/usr/share/doc/perl/Changes.gz
	ln -s ../perl/changelog.gz \
	    $(build)/libcgi-fast-perl/usr/share/doc/libcgi-fast-perl/changelog.gz

	touch $@

# Build architecture-independent files here.
binary-indep: build-stamp install-stamp
	$(checkdir)
	$(checkroot)
	rm -f debian/substvars
	for p in `./perl -l -00ne 'print $$1 if /^Architecture:\s+all/m \
	    and /^Package:\s+(.*)/m' debian/control`; \
	do \
	    rm -rf $(build)/$$p/DEBIAN; \
	    mkdir $(build)/$$p/DEBIAN; \
	    chmod 755 $(build)/$$p/DEBIAN; \
	    for c in preinst postinst prerm postrm; \
	    do \
		test -f debian/$$p.$$c || continue; \
		cp debian/$$p.$$c $(build)/$$p/DEBIAN/$$c; \
		chmod 755 $(build)/$$p/DEBIAN/$$c; \
	    done; \
	    test -d $(build)/$$p/etc && find $(build)/$$p/etc -type f \
		-printf '/etc/%P\n' >$(build)/$$p/DEBIAN/conffiles; \
	    (cd $(build)/$$p; find usr -type f -print | xargs -r md5sum) \
		>$(build)/$$p/DEBIAN/md5sums; \
	    dpkg-gencontrol -p$$p -isp -P$(build)/$$p $(subst_upstream) $(subst_next_upstream); \
	    dpkg --build $(build)/$$p ..; \
	done

# Build architecture-dependent files here.
binary-arch: build-stamp install-stamp
	$(checkdir)
	$(checkroot)
ifeq ($(installtype),static)
	echo 'libperl $(version) libperl$(version) (= $${source:Version})' \
	    >debian/shlibs.local

	echo 'libperl $(version) libperl$(version) (>= $(fullversion))' \
	    >debian/libperl$(version).shlibs
else
	echo 'libperl $(version)' >debian/shlibs.local
	echo 'libperl $(version) libperl$(version) (>= $(fullversion))' \
	    >debian/perl-base.shlibs
endif

	for p in `./perl -l -00ne 'print $$1 if /^Architecture:\s+any/m \
	    and /^Package:\s+(.*)/m' debian/control`; \
	do \
	    rm -rf $(build)/$$p/DEBIAN debian/substvars; \
	    mkdir $(build)/$$p/DEBIAN; \
	    for c in preinst postinst prerm postrm shlibs; \
	    do \
		test -f debian/$$p.$$c || continue; \
		cp debian/$$p.$$c $(build)/$$p/DEBIAN/$$c; \
		chmod 755 $(build)/$$p/DEBIAN/$$c; \
	    done; \
	    ! test -f $(build)/$$p/DEBIAN/shlibs || chmod 644 $(build)/$$p/DEBIAN/shlibs; \
	    (cd $(build)/$$p; find usr -type f -print | xargs -r md5sum) \
		>$(build)/$$p/DEBIAN/md5sums; \
	done
	# dpkg-shlibdeps needs to be run only after all the shlibs are present
	for p in `./perl -l -00ne 'print $$1 if /^Architecture:\s+any/m \
	    and /^Package:\s+(.*)/m' debian/control`; \
	do \
	    find $(build)/$$p/usr -type f \
		\( -perm +111 -o -name \*.so\* \) -print | \
		fgrep -v /usr/lib/debug/ | \
		xargs -r dpkg-shlibdeps -S$(srcdir)/$(build)/libperl$(version) \
		                        -S$(srcdir)/$(build)/perl-base 2>&1 | \
		fgrep -v 'File format not recognized'; # scripts \
	    dpkg-gencontrol -p$$p -isp -P$(build)/$$p $(subst_perlapi) $(subst_upstream); \
	    dpkg --build $(build)/$$p ..; \
	done

binary: binary-indep binary-arch

# maintainer targets
new-build: $(patches) refresh-patchlevel
	test -d .git # only for the git repository
	git checkout refs/heads/master # detach from 'master'
	git rm .top*
	git add debian/patches
	git add $(patches) patchlevel.h
	git commit -m 'export all the patches'

$(patches):
	test -d .git # patch export only works in the TopGit repository
	-rmdir debian/patches
	tg export --quilt debian/patches
	rm debian/patches/master.diff
	sed -i '/master.diff/ d' $(patches)

refresh-patchlevel: $(patches)
	sed -i '/$(patchprefix)/d' patchlevel.h
	grep -q $(patchlevelpatch) $(patches) || echo '$(patchlevelpatch) -p1' >> $(patches)
	sed s/VERSION/$(package_version)/ debian/$(patchlevelpatch).head > debian/patches/$(patchlevelpatch)
	perl debian/list-patches $(patchprefix) < $(patches) | \
	  xargs -d\\n -r perl -x patchlevel.h
	diff --unified=0 patchlevel.bak patchlevel.h | \
	  filterdiff --remove-timestamps --addprefix perl/ >> debian/patches/$(patchlevelpatch)
	$(RM) patchlevel.bak

.NOTPARALLEL:

.PHONY: build clean binary-indep binary-arch binary install patch unpatch new-build refresh-patchlevel
